
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# x-superset-image: &superset-image apache/superset:${TAG:-latest-dev}
# x-superset-depends-on: &superset-depends-on
  # - db
  # - redis
# x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  # - ./docker:/app/docker
  # - superset_home:/app/superset_home

version: '3.7'

volumes:
  superset_home:
    external: false
  # db_home:
  #   external: false
  # redis:
  #   external: false
  metadata_data:
  middle_var:
  historical_var:
  broker_var:
  coordinator_var:
  router_var:
  druid_shared:

services:
#################################### SUPERSET ##################################
  superset:
    build: 
      dockerfile: ./superset.Dockerfile
      args:
        - SUPERSET_SECRET_KEY=ymHoBFBeZe8OsqurmYKiVycby00ezeLTuDHggKSiivc0auuvcYdPiCql
    ports:
      - "8088:8088"
    restart: always
    environment:
      - SUPERSET_SECRET_KEY=ymHoBFBeZe8OsqurmYKiVycby00ezeLTuDHggKSiivc0auuvcYdPiCql
    volumes:
      - superset_home:/app/superset_home


############################################## kafka ###################################
  kafka1:
    image: bitnami/kafka:latest
    ports:
      - '9092'
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - ALLOW_PLAINTEXT_LISTENER=yes
    restart: always

  kafka2:
    image: bitnami/kafka:latest
    ports:
      - '9092'
    environment:
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - ALLOW_PLAINTEXT_LISTENER=yes
    restart: always
      
  kafka3:
    image: bitnami/kafka:latest
    ports:
      - '9092'
    environment:
      - KAFKA_CFG_BROKER_ID=3
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - ALLOW_PLAINTEXT_LISTENER=yes
    restart: always

  connector1: 
    build: 
      context: ./connector
    ports:
        - 8083:8083 
    environment:
      - BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=connect_configs
      - OFFSET_STORAGE_TOPIC=connect_offsets
      - STATUS_STORAGE_TOPIC=connect_statuses
    depends_on:
      - kafka1
      - kafka2
      - kafka3


  connector2: 
    build: 
      context: ./connector
    ports:
        - 8084:8083 
    environment:
      - BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=connect_configs
      - OFFSET_STORAGE_TOPIC=connect_offsets
      - STATUS_STORAGE_TOPIC=connect_statuses
    depends_on:
      - kafka1
      - kafka2
      - kafka3
  
  connector3: 
    build: 
      context: ./connector
    ports:
        - 8085:8083 
    environment:
      - BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=connect_configs
      - OFFSET_STORAGE_TOPIC=connect_offsets
      - STATUS_STORAGE_TOPIC=connect_statuses
    depends_on:
      - kafka1
      - kafka2
      - kafka3
  

  ######################################### DRUID #######################################333
  # Need 3.5 or later for container nodes
  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=druid
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=druid

  zookeeper:
    container_name: zookeeper
    image: zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1

  coordinator:
    image: apache/druid:26.0.0
    restart: always
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - druid.env

  broker:
    image: apache/druid:26.0.0
    restart: always
    volumes:
      - broker_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - druid.env

  historical:
    image: apache/druid:26.0.0
    restart: always
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8086:8083"
    command:
      - historical
    env_file:
      - druid.env

  middlemanager:
    image: apache/druid:26.0.0
    restart: always
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - druid.env

  router:
    image: apache/druid:26.0.0
    restart: always
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - druid.env


  ################################### KAFKA STREAMS #################################3
  ubuntu:
    build: 
      dockerfile: ./ubuntu.Dockerfile
    restart: always
    command: sleep infinity
    ports :
      - "8089:8089"